{"abi":[{"type":"function","name":"acceptOwnership","inputs":[{"name":"conduit","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"cancelOwnershipTransfer","inputs":[{"name":"conduit","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createConduit","inputs":[{"name":"conduitKey","type":"bytes32","internalType":"bytes32"},{"name":"initialOwner","type":"address","internalType":"address"}],"outputs":[{"name":"conduit","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"getChannel","inputs":[{"name":"conduit","type":"address","internalType":"address"},{"name":"channelIndex","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"channel","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getChannelStatus","inputs":[{"name":"conduit","type":"address","internalType":"address"},{"name":"channel","type":"address","internalType":"address"}],"outputs":[{"name":"isOpen","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getChannels","inputs":[{"name":"conduit","type":"address","internalType":"address"}],"outputs":[{"name":"channels","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getConduit","inputs":[{"name":"conduitKey","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"conduit","type":"address","internalType":"address"},{"name":"exists","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getConduitCodeHashes","inputs":[],"outputs":[{"name":"creationCodeHash","type":"bytes32","internalType":"bytes32"},{"name":"runtimeCodeHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getKey","inputs":[{"name":"conduit","type":"address","internalType":"address"}],"outputs":[{"name":"conduitKey","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getPotentialOwner","inputs":[{"name":"conduit","type":"address","internalType":"address"}],"outputs":[{"name":"potentialOwner","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getTotalChannels","inputs":[{"name":"conduit","type":"address","internalType":"address"}],"outputs":[{"name":"totalChannels","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"ownerOf","inputs":[{"name":"conduit","type":"address","internalType":"address"}],"outputs":[{"name":"owner","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"transferOwnership","inputs":[{"name":"conduit","type":"address","internalType":"address"},{"name":"newPotentialOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateChannel","inputs":[{"name":"conduit","type":"address","internalType":"address"},{"name":"channel","type":"address","internalType":"address"},{"name":"isOpen","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"NewConduit","inputs":[{"name":"conduit","type":"address","indexed":false,"internalType":"address"},{"name":"conduitKey","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"conduit","type":"address","indexed":true,"internalType":"address"},{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PotentialOwnerUpdated","inputs":[{"name":"newPotentialOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"CallerIsNotNewPotentialOwner","inputs":[{"name":"conduit","type":"address","internalType":"address"}]},{"type":"error","name":"CallerIsNotOwner","inputs":[{"name":"conduit","type":"address","internalType":"address"}]},{"type":"error","name":"ChannelOutOfRange","inputs":[{"name":"conduit","type":"address","internalType":"address"}]},{"type":"error","name":"ConduitAlreadyExists","inputs":[{"name":"conduit","type":"address","internalType":"address"}]},{"type":"error","name":"InvalidCreator","inputs":[]},{"type":"error","name":"InvalidInitialOwner","inputs":[]},{"type":"error","name":"NewPotentialOwnerAlreadySet","inputs":[{"name":"conduit","type":"address","internalType":"address"},{"name":"newPotentialOwner","type":"address","internalType":"address"}]},{"type":"error","name":"NewPotentialOwnerIsZeroAddress","inputs":[{"name":"conduit","type":"address","internalType":"address"}]},{"type":"error","name":"NoConduit","inputs":[]},{"type":"error","name":"NoPotentialOwnerCurrentlySet","inputs":[{"name":"conduit","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"acceptOwnership(address)":"51710e45","cancelOwnershipTransfer(address)":"7b37e561","createConduit(bytes32,address)":"794593bc","getChannel(address,uint256)":"027cc764","getChannelStatus(address,address)":"33bc8572","getChannels(address)":"8b9e028b","getConduit(bytes32)":"6e9bfd9f","getConduitCodeHashes()":"0a96ad39","getKey(address)":"93790f44","getPotentialOwner(address)":"906c87cc","getTotalChannels(address)":"4e3f9580","ownerOf(address)":"14afd79e","transferOwnership(address,address)":"6d435421","updateChannel(address,address,bool)":"13ad9cab"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ChannelOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ConduitAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoConduit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"NoPotentialOwnerCurrentlySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"name\":\"NewConduit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"createConduit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"channelIndex\",\"type\":\"uint256\"}],\"name\":\"getChannel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"name\":\"getChannelStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"getChannels\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"channels\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"name\":\"getConduit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConduitCodeHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"creationCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"runtimeCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"getPotentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"getTotalChannels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalChannels\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"updateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"errors\":{\"CallerIsNotNewPotentialOwner(address)\":[{\"details\":\"Revert with an error when attempting to claim ownership of a conduit      with a caller that is not the current potential owner for the      conduit in question.\"}],\"CallerIsNotOwner(address)\":[{\"details\":\"Revert with an error when attempting to update channels or transfer      ownership of a conduit when the caller is not the owner of the      conduit in question.\"}],\"ChannelOutOfRange(address)\":[{\"details\":\"Revert with an error when attempting to retrieve a channel using an      index that is out of range.\"}],\"ConduitAlreadyExists(address)\":[{\"details\":\"Revert with an error when attempting to create a conduit that      already exists.\"}],\"InvalidCreator()\":[{\"details\":\"Revert with an error when attempting to create a new conduit using a      conduit key where the first twenty bytes of the key do not match the      address of the caller.\"}],\"InvalidInitialOwner()\":[{\"details\":\"Revert with an error when attempting to create a new conduit when no      initial owner address is supplied.\"}],\"NewPotentialOwnerAlreadySet(address,address)\":[{\"details\":\"Revert with an error when attempting to set a new potential owner      that is already set.\"}],\"NewPotentialOwnerIsZeroAddress(address)\":[{\"details\":\"Revert with an error when attempting to register a new potential      owner and supplying the null address.\"}],\"NoConduit()\":[{\"details\":\"Revert with an error when attempting to interact with a conduit that      does not yet exist.\"}],\"NoPotentialOwnerCurrentlySet(address)\":[{\"details\":\"Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set.\"}]},\"events\":{\"NewConduit(address,bytes32)\":{\"details\":\"Emit an event whenever a new conduit is created.\",\"params\":{\"conduit\":\"The newly created conduit.\",\"conduitKey\":\"The conduit key used to create the new conduit.\"}},\"OwnershipTransferred(address,address,address)\":{\"details\":\"Emit an event whenever conduit ownership is transferred.\",\"params\":{\"conduit\":\"The conduit for which ownership has been                      transferred.\",\"newOwner\":\"The new owner of the conduit.\",\"previousOwner\":\"The previous owner of the conduit.\"}},\"PotentialOwnerUpdated(address)\":{\"details\":\"Emit an event whenever a conduit owner registers a new potential      owner for that conduit.\",\"params\":{\"newPotentialOwner\":\"The new potential owner of the conduit.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership(address)\":{\"params\":{\"conduit\":\"The conduit for which to accept ownership.\"}},\"cancelOwnershipTransfer(address)\":{\"params\":{\"conduit\":\"The conduit for which to cancel ownership transfer.\"}},\"createConduit(bytes32,address)\":{\"params\":{\"conduitKey\":\"The conduit key used to deploy the conduit. Note that                     the first twenty bytes of the conduit key must match                     the caller of this contract.\",\"initialOwner\":\"The initial owner to set for the new conduit.\"},\"returns\":{\"conduit\":\"The address of the newly deployed conduit.\"}},\"getChannel(address,uint256)\":{\"params\":{\"channelIndex\":\"The index of the channel in question.\",\"conduit\":\"The conduit for which to retrieve the open channel.\"},\"returns\":{\"channel\":\"The open channel, if any, at the specified channel index.\"}},\"getChannelStatus(address,address)\":{\"params\":{\"channel\":\"The channel for which to retrieve the status.\",\"conduit\":\"The conduit for which to retrieve the channel status.\"},\"returns\":{\"isOpen\":\"The status of the channel on the given conduit.\"}},\"getChannels(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve open channels.\"},\"returns\":{\"channels\":\"An array of open channels on the given conduit.\"}},\"getConduit(bytes32)\":{\"params\":{\"conduitKey\":\"The conduit key used to derive the conduit.\"},\"returns\":{\"conduit\":\"The derived address of the conduit.\",\"exists\":\" A boolean indicating whether the derived conduit has been                 deployed or not.\"}},\"getConduitCodeHashes()\":{\"details\":\"Retrieve the conduit creation code and runtime code hashes.\"},\"getKey(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve the associated conduit                key.\"},\"returns\":{\"conduitKey\":\"The conduit key used to deploy the supplied conduit.\"}},\"getPotentialOwner(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve the potential owner.\"},\"returns\":{\"potentialOwner\":\"The potential owner, if any, for the conduit.\"}},\"getTotalChannels(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve the total channel count.\"},\"returns\":{\"totalChannels\":\"The total number of open channels for the conduit.\"}},\"ownerOf(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve the associated owner.\"},\"returns\":{\"owner\":\"The owner of the supplied conduit.\"}},\"transferOwnership(address,address)\":{\"params\":{\"conduit\":\"The conduit for which to initiate ownership transfer.\",\"newPotentialOwner\":\"The new potential owner of the conduit.\"}},\"updateChannel(address,address,bool)\":{\"params\":{\"channel\":\"The channel to open or close on the conduit.\",\"conduit\":\"The conduit for which to open or close the channel.\",\"isOpen\":\"A boolean indicating whether to open or close the channel.\"}}},\"title\":\"ConduitControllerInterface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership(address)\":{\"notice\":\"Accept ownership of a supplied conduit. Only accounts that the         current owner has set as the new potential owner may call this         function.\"},\"cancelOwnershipTransfer(address)\":{\"notice\":\"Clear the currently set potential owner, if any, from a conduit.         Only the owner of the conduit in question may call this function.\"},\"createConduit(bytes32,address)\":{\"notice\":\"Deploy a new conduit using a supplied conduit key and assigning         an initial owner for the deployed conduit. Note that the first         twenty bytes of the supplied conduit key must match the caller         and that a new conduit cannot be created if one has already been         deployed using the same conduit key.\"},\"getChannel(address,uint256)\":{\"notice\":\"Retrieve an open channel at a specific index for a given conduit.         Note that the index of a channel can change as a result of other         channels being closed on the conduit.\"},\"getChannelStatus(address,address)\":{\"notice\":\"Retrieve the status (either open or closed) of a given channel on         a conduit.\"},\"getChannels(address)\":{\"notice\":\"Retrieve all open channels for a given conduit. Note that calling         this function for a conduit with many channels will revert with         an out-of-gas error.\"},\"getConduit(bytes32)\":{\"notice\":\"Derive the conduit associated with a given conduit key and         determine whether that conduit exists (i.e. whether it has been         deployed).\"},\"getKey(address)\":{\"notice\":\"Retrieve the conduit key for a deployed conduit via reverse         lookup.\"},\"getPotentialOwner(address)\":{\"notice\":\"Retrieve the potential owner, if any, for a given conduit. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the conduit in question via `acceptOwnership`.\"},\"getTotalChannels(address)\":{\"notice\":\"Retrieve the total number of open channels for a given conduit.\"},\"ownerOf(address)\":{\"notice\":\"Retrieve the current owner of a deployed conduit.\"},\"transferOwnership(address,address)\":{\"notice\":\"Initiate conduit ownership transfer by assigning a new potential         owner for the given conduit. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the conduit.         Only the owner of the conduit in question may call this function.\"},\"updateChannel(address,address,bool)\":{\"notice\":\"Open or close a channel on a given conduit, thereby allowing the         specified account to execute transfers against that conduit.         Extreme care must be taken when updating channels, as malicious         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155         tokens where the token holder has granted the conduit approval.         Only the owner of the conduit in question may call this function.\"}},\"notice\":\"ConduitControllerInterface contains all external function interfaces,         structs, events, and errors for the conduit controller.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/seaport-types/src/interfaces/ConduitControllerInterface.sol\":\"ConduitControllerInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ds-test/=lib/forge-std/lib/ds-test/src/\",\":@forge-std/=lib/forge-std/src/\",\":@merkle-generator/=lib/merkle-proof-generator/src/\",\":@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/seaport-sol/lib/seaport/lib/solmate/\",\":@safe-contracts/=lib/safe-contracts/contracts/\",\":@scripts/=scripts/\",\":@seaport-core/=lib/seaport-core/src/\",\":@seaport-sol/=lib/seaport-sol/src/\",\":@seaport-types/=lib/seaport-types/src/\",\":@solady/=lib/Solady/src/\",\":@src/=src/\",\":@test/=test/\",\":Solady/=lib/Solady/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/seaport-sol/lib/murky/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":safe-contracts/=lib/safe-contracts/\",\":seaport-core/=lib/seaport-core/\",\":seaport-sol/=lib/seaport-sol/src/\",\":seaport-types/=lib/seaport-types/\",\":seaport/=lib/seaport-sol/lib/seaport/contracts/\",\":solady/=lib/seaport-sol/lib/solady/\",\":solarray/=lib/seaport-sol/lib/solarray/src/\",\":solmate/=lib/seaport-sol/lib/seaport/lib/solmate/src/\"]},\"sources\":{\"lib/seaport-types/src/interfaces/ConduitControllerInterface.sol\":{\"keccak256\":\"0xfbdb813ba85803cc1faf1d82f354d7631b029597334e27f07a678487a1ad7bcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce247c947cb809a3aad55735dbab78c8d993d71349115aa9f040c44e6fa6b3d5\",\"dweb:/ipfs/QmX13SMXXfHRwCfhuyUNRNygh81zdngrfo7YbNWpxMmpLZ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.22+commit.4fc1097e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"type":"error","name":"CallerIsNotNewPotentialOwner"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"type":"error","name":"CallerIsNotOwner"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"type":"error","name":"ChannelOutOfRange"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"type":"error","name":"ConduitAlreadyExists"},{"inputs":[],"type":"error","name":"InvalidCreator"},{"inputs":[],"type":"error","name":"InvalidInitialOwner"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"address","name":"newPotentialOwner","type":"address"}],"type":"error","name":"NewPotentialOwnerAlreadySet"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"type":"error","name":"NewPotentialOwnerIsZeroAddress"},{"inputs":[],"type":"error","name":"NoConduit"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"type":"error","name":"NoPotentialOwnerCurrentlySet"},{"inputs":[{"internalType":"address","name":"conduit","type":"address","indexed":false},{"internalType":"bytes32","name":"conduitKey","type":"bytes32","indexed":false}],"type":"event","name":"NewConduit","anonymous":false},{"inputs":[{"internalType":"address","name":"conduit","type":"address","indexed":true},{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"address","name":"newPotentialOwner","type":"address","indexed":true}],"type":"event","name":"PotentialOwnerUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"acceptOwnership"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"cancelOwnershipTransfer"},{"inputs":[{"internalType":"bytes32","name":"conduitKey","type":"bytes32"},{"internalType":"address","name":"initialOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"createConduit","outputs":[{"internalType":"address","name":"conduit","type":"address"}]},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"uint256","name":"channelIndex","type":"uint256"}],"stateMutability":"view","type":"function","name":"getChannel","outputs":[{"internalType":"address","name":"channel","type":"address"}]},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"view","type":"function","name":"getChannelStatus","outputs":[{"internalType":"bool","name":"isOpen","type":"bool"}]},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"stateMutability":"view","type":"function","name":"getChannels","outputs":[{"internalType":"address[]","name":"channels","type":"address[]"}]},{"inputs":[{"internalType":"bytes32","name":"conduitKey","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getConduit","outputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"bool","name":"exists","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getConduitCodeHashes","outputs":[{"internalType":"bytes32","name":"creationCodeHash","type":"bytes32"},{"internalType":"bytes32","name":"runtimeCodeHash","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"stateMutability":"view","type":"function","name":"getKey","outputs":[{"internalType":"bytes32","name":"conduitKey","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"stateMutability":"view","type":"function","name":"getPotentialOwner","outputs":[{"internalType":"address","name":"potentialOwner","type":"address"}]},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"stateMutability":"view","type":"function","name":"getTotalChannels","outputs":[{"internalType":"uint256","name":"totalChannels","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"stateMutability":"view","type":"function","name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}]},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"address","name":"newPotentialOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"updateChannel"}],"devdoc":{"kind":"dev","methods":{"acceptOwnership(address)":{"params":{"conduit":"The conduit for which to accept ownership."}},"cancelOwnershipTransfer(address)":{"params":{"conduit":"The conduit for which to cancel ownership transfer."}},"createConduit(bytes32,address)":{"params":{"conduitKey":"The conduit key used to deploy the conduit. Note that                     the first twenty bytes of the conduit key must match                     the caller of this contract.","initialOwner":"The initial owner to set for the new conduit."},"returns":{"conduit":"The address of the newly deployed conduit."}},"getChannel(address,uint256)":{"params":{"channelIndex":"The index of the channel in question.","conduit":"The conduit for which to retrieve the open channel."},"returns":{"channel":"The open channel, if any, at the specified channel index."}},"getChannelStatus(address,address)":{"params":{"channel":"The channel for which to retrieve the status.","conduit":"The conduit for which to retrieve the channel status."},"returns":{"isOpen":"The status of the channel on the given conduit."}},"getChannels(address)":{"params":{"conduit":"The conduit for which to retrieve open channels."},"returns":{"channels":"An array of open channels on the given conduit."}},"getConduit(bytes32)":{"params":{"conduitKey":"The conduit key used to derive the conduit."},"returns":{"conduit":"The derived address of the conduit.","exists":" A boolean indicating whether the derived conduit has been                 deployed or not."}},"getConduitCodeHashes()":{"details":"Retrieve the conduit creation code and runtime code hashes."},"getKey(address)":{"params":{"conduit":"The conduit for which to retrieve the associated conduit                key."},"returns":{"conduitKey":"The conduit key used to deploy the supplied conduit."}},"getPotentialOwner(address)":{"params":{"conduit":"The conduit for which to retrieve the potential owner."},"returns":{"potentialOwner":"The potential owner, if any, for the conduit."}},"getTotalChannels(address)":{"params":{"conduit":"The conduit for which to retrieve the total channel count."},"returns":{"totalChannels":"The total number of open channels for the conduit."}},"ownerOf(address)":{"params":{"conduit":"The conduit for which to retrieve the associated owner."},"returns":{"owner":"The owner of the supplied conduit."}},"transferOwnership(address,address)":{"params":{"conduit":"The conduit for which to initiate ownership transfer.","newPotentialOwner":"The new potential owner of the conduit."}},"updateChannel(address,address,bool)":{"params":{"channel":"The channel to open or close on the conduit.","conduit":"The conduit for which to open or close the channel.","isOpen":"A boolean indicating whether to open or close the channel."}}},"version":1},"userdoc":{"kind":"user","methods":{"acceptOwnership(address)":{"notice":"Accept ownership of a supplied conduit. Only accounts that the         current owner has set as the new potential owner may call this         function."},"cancelOwnershipTransfer(address)":{"notice":"Clear the currently set potential owner, if any, from a conduit.         Only the owner of the conduit in question may call this function."},"createConduit(bytes32,address)":{"notice":"Deploy a new conduit using a supplied conduit key and assigning         an initial owner for the deployed conduit. Note that the first         twenty bytes of the supplied conduit key must match the caller         and that a new conduit cannot be created if one has already been         deployed using the same conduit key."},"getChannel(address,uint256)":{"notice":"Retrieve an open channel at a specific index for a given conduit.         Note that the index of a channel can change as a result of other         channels being closed on the conduit."},"getChannelStatus(address,address)":{"notice":"Retrieve the status (either open or closed) of a given channel on         a conduit."},"getChannels(address)":{"notice":"Retrieve all open channels for a given conduit. Note that calling         this function for a conduit with many channels will revert with         an out-of-gas error."},"getConduit(bytes32)":{"notice":"Derive the conduit associated with a given conduit key and         determine whether that conduit exists (i.e. whether it has been         deployed)."},"getKey(address)":{"notice":"Retrieve the conduit key for a deployed conduit via reverse         lookup."},"getPotentialOwner(address)":{"notice":"Retrieve the potential owner, if any, for a given conduit. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the conduit in question via `acceptOwnership`."},"getTotalChannels(address)":{"notice":"Retrieve the total number of open channels for a given conduit."},"ownerOf(address)":{"notice":"Retrieve the current owner of a deployed conduit."},"transferOwnership(address,address)":{"notice":"Initiate conduit ownership transfer by assigning a new potential         owner for the given conduit. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the conduit.         Only the owner of the conduit in question may call this function."},"updateChannel(address,address,bool)":{"notice":"Open or close a channel on a given conduit, thereby allowing the         specified account to execute transfers against that conduit.         Extreme care must be taken when updating channels, as malicious         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155         tokens where the token holder has granted the conduit approval.         Only the owner of the conduit in question may call this function."}},"version":1}},"settings":{"remappings":["@ds-test/=lib/forge-std/lib/ds-test/src/","@forge-std/=lib/forge-std/src/","@merkle-generator/=lib/merkle-proof-generator/src/","@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/seaport-sol/lib/seaport/lib/solmate/","@safe-contracts/=lib/safe-contracts/contracts/","@scripts/=scripts/","@seaport-core/=lib/seaport-core/src/","@seaport-sol/=lib/seaport-sol/src/","@seaport-types/=lib/seaport-types/src/","@solady/=lib/Solady/src/","@src/=src/","@test/=test/","Solady/=lib/Solady/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","murky/=lib/seaport-sol/lib/murky/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","safe-contracts/=lib/safe-contracts/","seaport-core/=lib/seaport-core/","seaport-sol/=lib/seaport-sol/src/","seaport-types/=lib/seaport-types/","seaport/=lib/seaport-sol/lib/seaport/contracts/","solady/=lib/seaport-sol/lib/solady/","solarray/=lib/seaport-sol/lib/solarray/src/","solmate/=lib/seaport-sol/lib/seaport/lib/solmate/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/seaport-types/src/interfaces/ConduitControllerInterface.sol":"ConduitControllerInterface"},"evmVersion":"paris","libraries":{}},"sources":{"lib/seaport-types/src/interfaces/ConduitControllerInterface.sol":{"keccak256":"0xfbdb813ba85803cc1faf1d82f354d7631b029597334e27f07a678487a1ad7bcc","urls":["bzz-raw://ce247c947cb809a3aad55735dbab78c8d993d71349115aa9f040c44e6fa6b3d5","dweb:/ipfs/QmX13SMXXfHRwCfhuyUNRNygh81zdngrfo7YbNWpxMmpLZ"],"license":"MIT"}},"version":1},"id":91}